#!/bin/bash

# HAProxy and Keepalived DEB Files Downloader
# Downloads all .deb files needed for offline installation

set -euo pipefail

# Configuration
DOWNLOAD_DIR="./deb_packages"
PACKAGES=("haproxy" "keepalived")
TEMP_DIR="/tmp/deb-download-$$"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Logging functions
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check if running as root
check_privileges() {
    if [[ $EUID -ne 0 ]]; then
        error "This script needs to be run as root or with sudo to update package lists"
        error "Usage: sudo $0"
        exit 1
    fi
}

# Check required tools
check_dependencies() {
    local missing_tools=()
    
    for tool in apt-get apt-cache; do
        if ! command -v "$tool" &> /dev/null; then
            missing_tools+=("$tool")
        fi
    done
    
    if [[ ${#missing_tools[@]} -gt 0 ]]; then
        error "Missing required tools: ${missing_tools[*]}"
        exit 1
    fi
}

# Update package lists
update_package_lists() {
    log "Updating package lists..."
    if apt-get update > /dev/null 2>&1; then
        success "Package lists updated"
    else
        error "Failed to update package lists"
        exit 1
    fi
}

# Setup directories
setup_directories() {
    log "Creating download directory: $DOWNLOAD_DIR"
    mkdir -p "$DOWNLOAD_DIR"
    mkdir -p "$TEMP_DIR"
}

# Get package dependencies
get_dependencies() {
    local package="$1"
    local deps_file="$TEMP_DIR/${package}_all_deps.txt"
    
    log "Resolving dependencies for $package..."
    
    # Start with the main package
    echo "$package" > "$deps_file"
    
    # Get direct dependencies
    apt-cache depends "$package" 2>/dev/null | \
        grep -E "^\s*(Depends|PreDepends):" | \
        awk '{print $2}' | \
        sed 's/[<>].*//g' | \
        grep -v '^$' | \
        sort -u >> "$deps_file"
    
    # Get dependencies of dependencies (one level deep to avoid complexity)
    local temp_deps="$TEMP_DIR/${package}_temp_deps.txt"
    cp "$deps_file" "$temp_deps"
    
    while IFS= read -r dep; do
        if [[ -n "$dep" ]] && apt-cache show "$dep" &>/dev/null; then
            apt-cache depends "$dep" 2>/dev/null | \
                grep -E "^\s*(Depends|PreDepends):" | \
                awk '{print $2}' | \
                sed 's/[<>].*//g' | \
                grep -v '^$' >> "$deps_file"
        fi
    done < "$temp_deps"
    
    # Remove duplicates and filter out packages that don't exist
    sort -u "$deps_file" > "$temp_deps"
    > "$deps_file"
    
    while IFS= read -r pkg; do
        if [[ -n "$pkg" ]] && apt-cache show "$pkg" &>/dev/null; then
            echo "$pkg" >> "$deps_file"
        fi
    done < "$temp_deps"
    
    local count
    count=$(wc -l < "$deps_file")
    success "Found $count packages for $package"
}

# Download .deb files
download_deb_files() {
    local package="$1"
    local deps_file="$TEMP_DIR/${package}_all_deps.txt"
    
    log "Downloading .deb files for $package..."
    
    cd "$DOWNLOAD_DIR"
    
    local downloaded=0
    local failed=0
    
    while IFS= read -r pkg; do
        if [[ -n "$pkg" ]]; then
            if apt-get download "$pkg" 2>/dev/null; then
                ((downloaded++))
                echo -n "."
            else
                ((failed++))
            fi
        fi
    done < "$deps_file"
    
    echo ""
    success "Downloaded $downloaded .deb files for $package"
    [[ $failed -gt 0 ]] && warning "$failed packages could not be downloaded"
    
    cd - > /dev/null
}

# Remove duplicate packages (keep latest version)
remove_duplicates() {
    log "Removing duplicate packages..."
    
    cd "$DOWNLOAD_DIR"
    
    if ! ls *.deb 1> /dev/null 2>&1; then
        warning "No .deb files found"
        return
    fi
    
    # Group by package name and keep only the latest version
    for pkg_name in $(ls *.deb | sed 's/_.*//g' | sort -u); do
        local pkg_files
        pkg_files=$(ls ${pkg_name}_*.deb 2>/dev/null | sort -V)
        local pkg_count
        pkg_count=$(echo "$pkg_files" | wc -l)
        
        if [[ $pkg_count -gt 1 ]]; then
            # Remove all but the last (latest) version
            echo "$pkg_files" | head -n -1 | xargs rm -f
        fi
    done
    
    cd - > /dev/null
}

# Generate package summary
generate_summary() {
    local summary_file="$DOWNLOAD_DIR/download_summary.txt"
    
    log "Generating download summary..."
    
    {
        echo "# HAProxy and Keepalived DEB Files Download Summary"
        echo "# Generated on: $(date)"
        echo "# System: $(lsb_release -d 2>/dev/null | cut -f2 || echo 'Unknown')"
        echo ""
        
        cd "$DOWNLOAD_DIR"
        
        if ls *.deb 1> /dev/null 2>&1; then
            echo "Downloaded Packages:"
            echo "==================="
            for deb in *.deb; do
                local info
                info=$(dpkg-deb -f "$deb" Package Version Architecture 2>/dev/null || echo "Unknown")
                echo "$deb"
            done | sort
            
            echo ""
            echo "Statistics:"
            echo "==========="
            echo "Total packages: $(ls *.deb | wc -l)"
            echo "Total size: $(du -sh . | cut -f1)"
        else
            echo "No packages downloaded"
        fi
        
        cd - > /dev/null
        
    } > "$summary_file"
    
    success "Summary created: $summary_file"
}

# Cleanup
cleanup() {
    [[ -d "$TEMP_DIR" ]] && rm -rf "$TEMP_DIR"
}

# Main function
main() {
    log "Starting DEB files download for HAProxy and Keepalived"
    
    trap cleanup EXIT
    
    # Checks
    check_privileges
    check_dependencies
    
    # Setup
    update_package_lists
    setup_directories
    
    # Process each package
    for package in "${PACKAGES[@]}"; do
        get_dependencies "$package"
        download_deb_files "$package"
    done
    
    # Cleanup and summary
    remove_duplicates
    generate_summary
    
    # Final summary
    cd "$DOWNLOAD_DIR"
    local total_files total_size
    total_files=$(ls *.deb 2>/dev/null | wc -l)
    total_size=$(du -sh . 2>/dev/null | cut -f1)
    cd - > /dev/null
    
    echo ""
    success "Download completed!"
    echo "  Files downloaded: $total_files"
    echo "  Total size: $total_size"
    echo "  Location: $DOWNLOAD_DIR"
    echo ""
    echo "You can now copy the '$DOWNLOAD_DIR' directory to your air-gapped system"
}

# Run main function
main "$@"

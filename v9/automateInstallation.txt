deployment.cfg
FLOATING_IP: 10.168.10.101
PRIMARY_IP:  10.168.10.102
SECONDARY_IP: 10.168.10.103
HAPROXY_PORT: 9999
INTERFACE: ens0012
WORKERNODE1_IP : 10.168.10.104
WORKERNODE2_IP : 10.168.10.105
WORKERNODE3_IP : 10.168.10.106

bootstraup.sh
#!/bin/bash
set -e

# 1. Load deployment.cfg into environment variables
if [ ! -f deployment.cfg ]; then
  echo "deployment.cfg not found!"
  exit 1
fi

# Export all variables from deployment.cfg
export $(grep -v '^#' deployment.cfg | xargs)

# 2. Replace placeholders in inventory/group_vars/all.yml
ALL_YML="inventory/group_vars/all.yml"
HOST_YML="inventory/host.yml"

if [ ! -f "$ALL_YML" ] || [ ! -f "$HOST_YML" ]; then
  echo "YAML files not found in inventory/group_vars or inventory!"
  exit 1
fi

# Replace all placeholders in all.yml
sed -i \
  -e "s/{{ *FLOATING_IP *}}/$FLOATING_IP/g" \
  -e "s/{{ *PRIMARY_IP *}}/$PRIMARY_IP/g" \
  -e "s/{{ *SECONDARY_IP *}}/$SECONDARY_IP/g" \
  -e "s/{{ *HAPROXY_PORT *}}/$HAPROXY_PORT/g" \
  -e "s/{{ *INTERFACE *}}/$INTERFACE/g" \
  -e "s/{{ *WORKERNODE1_IP *}}/$WORKERNODE1_IP/g" \
  -e "s/{{ *WORKERNODE2_IP *}}/$WORKERNODE2_IP/g" \
  -e "s/{{ *WORKERNODE3_IP *}}/$WORKERNODE3_IP/g" \
  "$ALL_YML"

# Replace all placeholders in host.yml
sed -i \
  -e "s/{{ *lbhost1 *}}/$PRIMARY_IP/g" \
  -e "s/{{ *lbhost2 *}}/$SECONDARY_IP/g" \
  -e "s/{{ *FLOATING_IP *}}/$FLOATING_IP/g" \
  "$HOST_YML"

echo "Placeholders replaced in $ALL_YML and $HOST_YML."

# 3. Run Ansible playbooks
echo "Running Keepalived playbook..."
ansible-playbook -i inventory/host.yml playbooks/deploy-keepalived.yml

echo "Running HAProxy playbook..."
ansible-playbook -i inventory/host.yml playbooks/deploy-haproxy.yml

# 4. Check service status
echo "Checking HAProxy status..."
systemctl status haproxy --no-pager

echo "Checking Keepalived status..."
systemctl status keepalived --no-pager

echo "Bootstrap complete."



******
HAProxy & Keepalived Cluster: Configuration Variables
Below is a concise explanation of each variable in deployment.cfg for your HAProxy + Keepalived cluster setup.

Variable	Purpose	Example Value
FLOATING_IP	Virtual IP address managed by Keepalived. Automatically fails over between nodes. Clients connect here.	10.168.10.101
PRIMARY_IP	Static IP of the active load balancer node (initial holder of FLOATING_IP).	10.168.10.102
SECONDARY_IP	Static IP of the standby load balancer node (takes over FLOATING_IP if primary fails).	10.168.10.103
HAPROXY_PORT	Port where HAProxy listens for client traffic (HTTP/HTTPS).	9999
INTERFACE	Network interface (e.g., eth0, ens192) used for floating IP binding and VRRP communication.	ens0012
WORKERNODE*_IP	IPs of backend application servers. HAProxy forwards traffic to these.	10.168.10.104â€“.106
Key Relationships
Keepalived:

Uses PRIMARY_IP and SECONDARY_IP for VRRP communication.

Binds FLOATING_IP to INTERFACE on the active node.

Fails over FLOATING_IP to standby if primary becomes unreachable.

HAProxy:

Listens on HAPROXY_PORT (e.g., :9999) for client requests.

Forwards traffic to WORKERNODE*_IP addresses (backend servers).

Uses FLOATING_IP as the client-facing endpoint.

High Availability Flow:

text
graph LR  
  Client --> FLOATING_IP  
  FLOATING_IP -->|Active| PRIMARY_IP  
  PRIMARY_IP -->|Traffic| WORKERNODE1_IP  
  PRIMARY_IP -->|Traffic| WORKERNODE2_IP  
  FLOATING_IP -.->|Failover| SECONDARY_IP  
  SECONDARY_IP -->|Traffic| WORKERNODE3_IP  
If the primary node fails, FLOATING_IP moves to SECONDARY_IP within seconds.

Why These Values Matter
FLOATING_IP: Ensures continuous client access during node failures.
INTERFACE: Must match the physical/virtual NIC where VRRP runs.
WORKERNODE*_IP: Must point to live backend servers (e.g., web apps, databases).
HAPROXY_PORT: Must be open in firewalls for client access.
Note: All IPs must be in the same subnet. INTERFACE name must match ip a output on

HA Load Balancer Automation Package
This package provides complete automation for setting up HAProxy + Keepalived High Availability Load Balancer with Apache web servers using Ansible, Kubernetes Helm charts, and installation scripts.
Package Structure
ha-loadbalancer-automation/
├── ansible/
│   ├── playbooks/
│   │   ├── site.yml
│   │   ├── webservers.yml
│   │   └── loadbalancers.yml
│   ├── inventory/
│   │   ├── hosts.yml
│   │   └── group_vars/
│   │       ├── all.yml
│   │       ├── webservers.yml
│   │       └── loadbalancers.yml
│   ├── roles/
│   │   ├── apache-webserver/
│   │   ├── haproxy/
│   │   ├── keepalived/
│   │   └── firewall/
│   └── templates/
├── helm/
│   ├── ha-loadbalancer/
│   │   ├── Chart.yaml
│   │   ├── values.yaml
│   │   └── templates/
│   └── webserver/
│       ├── Chart.yaml
│       ├── values.yaml
│       └── templates/
├── scripts/
│   ├── install.sh
│   ├── configure.sh
│   ├── test.sh
│   └── uninstall.sh
├── config/
│   └── environment.conf
└── docs/
    ├── README.md
    ├── INSTALLATION.md
    └── TROUBLESHOOTING.md
Files Content
1. Main Ansible Playbook
yaml# ansible/playbooks/site.yml
---
- name: Deploy HA Load Balancer Infrastructure
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Display deployment information
      debug:
        msg: |
          Starting HA Load Balancer deployment
          Web Servers: {{ groups['webservers'] | length }}
          Load Balancers: {{ groups['loadbalancers'] | length }}
          Virtual IP: {{ virtual_ip }}

- import_playbook: webservers.yml
- import_playbook: loadbalancers.yml

- name: Post-deployment verification
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Wait for services to be ready
      pause:
        seconds: 30
        prompt: "Waiting for services to initialize..."

    - name: Test load balancer connectivity
      uri:
        url: "http://{{ virtual_ip }}"
        method: GET
        status_code: 200
      register: lb_test
      retries: 5
      delay: 10

    - name: Display deployment status
      debug:
        msg: |
          HA Load Balancer deployment completed successfully!
          Virtual IP: {{ virtual_ip }}
          Access URL: http://{{ virtual_ip }}
          Stats URL: http://{{ groups['loadbalancers'][0] }}:8404/stats
2. Web Servers Playbook
yaml# ansible/playbooks/webservers.yml
---
- name: Configure Apache Web Servers
  hosts: webservers
  become: yes
  vars:
    apache_port: "{{ webserver_port | default(8888) }}"
    
  tasks:
    - name: Update system packages
      apt:
        update_cache: yes
        upgrade: dist
        cache_valid_time: 3600

    - name: Install Apache2
      apt:
        name: apache2
        state: present

    - name: Configure Apache ports
      template:
        src: ports.conf.j2
        dest: /etc/apache2/ports.conf
        backup: yes
      notify: restart apache2

    - name: Create custom Apache site configuration
      template:
        src: apache-site.conf.j2
        dest: "/etc/apache2/sites-available/ha-webserver-{{ apache_port }}.conf"
        backup: yes
      notify: restart apache2

    - name: Disable default Apache sites
      apache2_module:
        name: "{{ item }}"
        state: absent
      loop:
        - default
        - 000-default
      ignore_errors: yes

    - name: Enable custom Apache site
      apache2_module:
        name: "ha-webserver-{{ apache_port }}"
        state: present
      notify: restart apache2

    - name: Create web content directory
      file:
        path: /var/www/ha-webserver
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Generate unique web server content
      template:
        src: index.html.j2
        dest: /var/www/ha-webserver/index.html
        owner: www-data
        group: www-data
        mode: '0644'

    - name: Configure firewall for web servers
      ufw:
        rule: allow
        port: "{{ apache_port }}"
        from_ip: "{{ item }}"
      loop: "{{ groups['loadbalancers'] }}"

    - name: Allow SSH through firewall
      ufw:
        rule: allow
        port: '22'

    - name: Enable firewall
      ufw:
        state: enabled
        policy: deny

    - name: Start and enable Apache2
      systemd:
        name: apache2
        state: started
        enabled: yes

  handlers:
    - name: restart apache2
      systemd:
        name: apache2
        state: restarted
3. Load Balancers Playbook
yaml# ansible/playbooks/loadbalancers.yml
---
- name: Configure HAProxy and Keepalived
  hosts: loadbalancers
  become: yes
  tasks:
    - name: Update system packages
      apt:
        update_cache: yes
        upgrade: dist
        cache_valid_time: 3600

    - name: Install HAProxy and Keepalived
      apt:
        name:
          - haproxy
          - keepalived
          - curl
        state: present

    - name: Enable IP forwarding
      sysctl:
        name: "{{ item }}"
        value: '1'
        state: present
        reload: yes
      loop:
        - net.ipv4.ip_forward
        - net.ipv4.ip_nonlocal_bind

    - name: Configure HAProxy
      template:
        src: haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
        backup: yes
      notify: restart haproxy

    - name: Configure Keepalived
      template:
        src: keepalived.conf.j2
        dest: /etc/keepalived/keepalived.conf
        backup: yes
      notify: restart keepalived

    - name: Configure firewall for load balancers
      ufw:
        rule: allow
        port: "{{ item }}"
      loop:
        - '80'
        - '443'
        - '8404'
        - '112'
        - '22'

    - name: Allow VRRP between load balancers
      ufw:
        rule: allow
        from_ip: "{{ item }}"
      loop: "{{ groups['loadbalancers'] }}"

    - name: Enable firewall
      ufw:
        state: enabled
        policy: deny

    - name: Start and enable HAProxy
      systemd:
        name: haproxy
        state: started
        enabled: yes

    - name: Start and enable Keepalived
      systemd:
        name: keepalived
        state: started
        enabled: yes

  handlers:
    - name: restart haproxy
      systemd:
        name: haproxy
        state: restarted

    - name: restart keepalived
      systemd:
        name: keepalived
        state: restarted
4. Ansible Inventory
yaml# ansible/inventory/hosts.yml
all:
  children:
    loadbalancers:
      hosts:
        lb1:
          ansible_host: 192.168.1.101
          keepalived_priority: 110
          keepalived_state: MASTER
        lb2:
          ansible_host: 192.168.1.102
          keepalived_priority: 100
          keepalived_state: BACKUP
    webservers:
      hosts:
        web1:
          ansible_host: 192.168.1.201
          server_id: 1
        web2:
          ansible_host: 192.168.1.202
          server_id: 2
        web3:
          ansible_host: 192.168.1.203
          server_id: 3
5. Ansible Variables
yaml# ansible/inventory/group_vars/all.yml
---
# Network Configuration
virtual_ip: "192.168.1.100"
network_interface: "{{ ansible_default_ipv4.interface }}"

# Authentication
ansible_user: ubuntu
ansible_ssh_private_key_file: ~/.ssh/id_rsa
ansible_become: yes

# Common Settings
timezone: "UTC"
ntp_servers:
  - 0.pool.ntp.org
  - 1.pool.ntp.org

# Monitoring
enable_monitoring: true
log_level: "info"
yaml# ansible/inventory/group_vars/webservers.yml
---
webserver_port: 8888
apache_document_root: "/var/www/ha-webserver"
apache_log_level: "warn"

# Apache Configuration
apache_modules:
  - rewrite
  - ssl
  - headers

# Content Configuration
server_banner: "HA Web Server"
custom_headers:
  - "X-Served-By: {{ inventory_hostname }}"
  - "X-Load-Balanced: true"
yaml# ansible/inventory/group_vars/loadbalancers.yml
---
# HAProxy Configuration
haproxy_stats_port: 8404
haproxy_stats_uri: "/stats"
haproxy_stats_user: "admin"
haproxy_stats_password: "secure123!"

# Load Balancing Algorithm
lb_algorithm: "roundrobin"
health_check_interval: 2000
health_check_rise: 2
health_check_fall: 3

# Keepalived Configuration
vrrp_router_id: 51
vrrp_auth_password: "mypassword123"
vrrp_advertisement_interval: 1

# SSL Configuration (optional)
enable_ssl: false
ssl_certificate_path: "/etc/ssl/certs/server.crt"
ssl_private_key_path: "/etc/ssl/private/server.key"
6. Ansible Templates
apache# ansible/templates/ports.conf.j2
# Ports configuration for Apache
Listen {{ webserver_port }}
{% if enable_ssl %}
Listen 443 ssl
{% endif %}
apache# ansible/templates/apache-site.conf.j2
<VirtualHost *:{{ webserver_port }}>
    ServerName {{ ansible_hostname }}.local
    DocumentRoot {{ apache_document_root }}
    
    <Directory {{ apache_document_root }}>
        Options Indexes FollowSymLinks
        AllowOverride None
        Require all granted
    </Directory>
    
    # Custom Headers
    {% for header in custom_headers %}
    Header always set {{ header }}
    {% endfor %}
    
    # Logging
    ErrorLog ${APACHE_LOG_DIR}/ha-webserver-error.log
    CustomLog ${APACHE_LOG_DIR}/ha-webserver-access.log combined
    
    # Health Check Endpoint
    <Location "/health">
        SetHandler server-status
        Require local
        Require ip {{ groups['loadbalancers'] | join(' ') }}
    </Location>
</VirtualHost>
html# ansible/templates/index.html.j2
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ server_banner }} - {{ ansible_hostname }}</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            margin: 0;
            padding: 20px;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 40px;
            text-align: center;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.2);
            max-width: 600px;
        }
        h1 {
            margin-bottom: 30px;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }
        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }
        .info-card {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .info-card h3 {
            margin: 0 0 10px 0;
            font-size: 1.1em;
            opacity: 0.8;
        }
        .info-card p {
            margin: 0;
            font-size: 1.2em;
            font-weight: bold;
        }
        .timestamp {
            margin-top: 30px;
            opacity: 0.7;
            font-style: italic;
        }
        .status-badge {
            display: inline-block;
            background: #00ff88;
            color: #000;
            padding: 5px 15px;
            border-radius: 20px;
            font-weight: bold;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🚀 {{ server_banner }}</h1>
        <div class="status-badge">ONLINE</div>
        
        <div class="info-grid">
            <div class="info-card">
                <h3>Server</h3>
                <p>{{ ansible_hostname }}</p>
            </div>
            <div class="info-card">
                <h3>IP Address</h3>
                <p>{{ ansible_default_ipv4.address }}</p>
            </div>
            <div class="info-card">
                <h3>Port</h3>
                <p>{{ webserver_port }}</p>
            </div>
            <div class="info-card">
                <h3>Server ID</h3>
                <p>{{ server_id }}</p>
            </div>
        </div>
        
        <div class="timestamp">
            <p>Deployed: {{ ansible_date_time.iso8601 }}</p>
            <p>Load Balanced via HAProxy + Keepalived</p>
        </div>
    </div>
</body>
</html>
# ansible/templates/haproxy.cfg.j2
global
    daemon
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    
    # Logging
    log stdout local0 {{ log_level }}
    
    # SSL Configuration
    {% if enable_ssl %}
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private
    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    {% endif %}

defaults
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    option httplog
    option dontlognull
    option redispatch
    retries 3
    maxconn 2000
    option httpchk GET /health

# Statistics
listen stats
    bind *:{{ haproxy_stats_port }}
    stats enable
    stats uri {{ haproxy_stats_uri }}
    stats refresh 30s
    stats admin if TRUE
    {% if haproxy_stats_user is defined %}
    stats auth {{ haproxy_stats_user }}:{{ haproxy_stats_password }}
    {% endif %}

# Frontend
frontend web_frontend
    bind {{ virtual_ip }}:80
    {% if enable_ssl %}
    bind {{ virtual_ip }}:443 ssl crt {{ ssl_certificate_path }}
    redirect scheme https if !{ ssl_fc }
    {% endif %}
    
    default_backend web_servers
    
    # Headers
    capture request header Host len 32
    capture response header Content-Length len 10

# Backend
backend web_servers
    balance {{ lb_algorithm }}
    option httpchk GET /health
    
    {% for host in groups['webservers'] %}
    server {{ host }} {{ hostvars[host]['ansible_host'] }}:{{ webserver_port }} check inter {{ health_check_interval }} rise {{ health_check_rise }} fall {{ health_check_fall }}
    {% endfor %}
# ansible/templates/keepalived.conf.j2
global_defs {
    router_id {{ inventory_hostname }}
    script_user root
    enable_script_security
}

vrrp_script chk_haproxy {
    script "/bin/curl -f http://localhost:{{ haproxy_stats_port }}{{ haproxy_stats_uri }} || exit 1"
    interval {{ health_check_interval | int // 1000 }}
    weight -2
    fall {{ health_check_fall }}
    rise {{ health_check_rise }}
}

vrrp_instance VI_1 {
    state {{ keepalived_state }}
    interface {{ network_interface }}
    virtual_router_id {{ vrrp_router_id }}
    priority {{ keepalived_priority }}
    advert_int {{ vrrp_advertisement_interval }}
    
    authentication {
        auth_type PASS
        auth_pass {{ vrrp_auth_password }}
    }
    
    virtual_ipaddress {
        {{ virtual_ip }}/24
    }
    
    track_script {
        chk_haproxy
    }
    
    {% if keepalived_state == 'MASTER' %}
    notify_master "/bin/echo 'Became MASTER' | logger"
    {% else %}
    notify_backup "/bin/echo 'Became BACKUP' | logger"
    {% endif %}
    notify_fault "/bin/echo 'Fault detected' | logger"
}
7. Helm Charts
yaml# helm/ha-loadbalancer/Chart.yaml
apiVersion: v2
name: ha-loadbalancer
description: High Availability Load Balancer with HAProxy and Keepalived
type: application
version: 1.0.0
appVersion: "1.0.0"
maintainers:
  - name: DevOps Team
    email: devops@company.com
sources:
  - https://github.com/company/ha-loadbalancer
keywords:
  - haproxy
  - keepalived
  - load-balancer
  - high-availability
yaml# helm/ha-loadbalancer/values.yaml
# Global Configuration
global:
  namespace: ha-loadbalancer
  labels:
    app: ha-loadbalancer
    version: v1.0.0

# HAProxy Configuration
haproxy:
  replicaCount: 2
  image:
    repository: haproxy
    tag: "2.8-alpine"
    pullPolicy: IfNotPresent
  
  service:
    type: LoadBalancer
    port: 80
    targetPort: 80
    annotations: {}
  
  config:
    stats:
      enabled: true
      port: 8404
      uri: /stats
      user: admin
      password: secure123!
    
    backend:
      algorithm: roundrobin
      healthCheck:
        interval: 2000
        rise: 2
        fall: 3

# Web Server Configuration
webserver:
  replicaCount: 3
  image:
    repository: httpd
    tag: "2.4-alpine"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 8888
    targetPort: 80
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

# Ingress Configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  hosts:
    - host: ha-loadbalancer.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s

# Autoscaling
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80
8. Kubernetes Deployment Templates
yaml# helm/ha-loadbalancer/templates/haproxy-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ha-loadbalancer.fullname" . }}-haproxy
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "ha-loadbalancer.labels" . | nindent 4 }}
    component: haproxy
spec:
  replicas: {{ .Values.haproxy.replicaCount }}
  selector:
    matchLabels:
      {{- include "ha-loadbalancer.selectorLabels" . | nindent 6 }}
      component: haproxy
  template:
    metadata:
      labels:
        {{- include "ha-loadbalancer.selectorLabels" . | nindent 8 }}
        component: haproxy
    spec:
      containers:
      - name: haproxy
        image: "{{ .Values.haproxy.image.repository }}:{{ .Values.haproxy.image.tag }}"
        imagePullPolicy: {{ .Values.haproxy.image.pullPolicy }}
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        - name: stats
          containerPort: {{ .Values.haproxy.config.stats.port }}
          protocol: TCP
        livenessProbe:
          httpGet:
            path: {{ .Values.haproxy.config.stats.uri }}
            port: stats
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: {{ .Values.haproxy.config.stats.uri }}
            port: stats
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: haproxy-config
          mountPath: /usr/local/etc/haproxy/haproxy.cfg
          subPath: haproxy.cfg
        resources:
          {{- toYaml .Values.haproxy.resources | nindent 10 }}
      volumes:
      - name: haproxy-config
        configMap:
          name: {{ include "ha-loadbalancer.fullname" . }}-haproxy-config
9. Installation Scripts
bash#!/bin/bash
# scripts/install.sh

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PACKAGE_NAME="ha-loadbalancer-automation"
VERSION="1.0.0"
INSTALL_DIR="/opt/ha-loadbalancer"
CONFIG_FILE="config/environment.conf"

# Functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_requirements() {
    log_info "Checking system requirements..."
    
    # Check if running as root
    if [[ $EUID -eq 0 ]]; then
        log_error "This script should not be run as root"
        exit 1
    fi
    
    # Check required commands
    local required_commands=("ansible" "ansible-playbook" "kubectl" "helm")
    for cmd in "${required_commands[@]}"; do
        if ! command -v $cmd &> /dev/null; then
            log_error "$cmd is not installed"
            exit 1
        fi
    done
    
    log_success "System requirements check passed"
}

install_ansible_dependencies() {
    log_info "Installing Ansible dependencies..."
    
    # Install Ansible collections
    ansible-galaxy collection install community.general
    ansible-galaxy collection install ansible.posix
    
    log_success "Ansible dependencies installed"
}

setup_configuration() {
    log_info "Setting up configuration..."
    
    if [[ ! -f "$CONFIG_FILE" ]]; then
        log_error "Configuration file $CONFIG_FILE not found"
        exit 1
    fi
    
    # Source configuration
    source "$CONFIG_FILE"
    
    # Validate configuration
    if [[ -z "$VIRTUAL_IP" ]] || [[ -z "$LOADBALANCER_IPS" ]] || [[ -z "$WEBSERVER_IPS" ]]; then
        log_error "Configuration validation failed. Check $CONFIG_FILE"
        exit 1
    fi
    
    log_success "Configuration validated"
}

deploy_infrastructure() {
    log_info "Deploying HA Load Balancer infrastructure..."
    
    # Deploy using Ansible
    ansible-playbook -i ansible/inventory/hosts.yml ansible/playbooks/site.yml \
        --extra-vars "@config/environment.conf" \
        --ask-become-pass
    
    if [[ $? -eq 0 ]]; then
        log_success "Infrastructure deployment completed"
    else
        log_error "Infrastructure deployment failed"
        exit 1
    fi
}

deploy_kubernetes() {
    local deploy_k8s=${1:-false}
    
    if [[ "$deploy_k8s" == "true" ]]; then
        log_info "Deploying to Kubernetes..."
        
        # Create namespace
        kubectl create namespace ha-loadbalancer --dry-run=client -o yaml | kubectl apply -f -
        
        # Deploy using Helm
        helm upgrade --install ha-loadbalancer helm/ha-loadbalancer \
            --namespace ha-loadbalancer \
            --values helm/ha-loadbalancer/values.yaml
        
        if [[ $? -eq 0 ]]; then
            log_success "Kubernetes deployment completed"
        else
            log_error "Kubernetes deployment failed"
            exit 1
        fi
    fi
}

run_tests() {
    log_info "Running deployment tests..."
    
    # Source configuration for test variables
    source "$CONFIG_FILE"
    
    # Test virtual IP connectivity
    if curl -f --connect-timeout 10 "http://$VIRTUAL_IP" > /dev/null 2>&1; then
        log_success "Virtual IP connectivity test passed"
    else
        log_warning "Virtual IP connectivity test failed"
    fi
    
    # Test load balancing
    log_info "Testing load balancing..."
    for i in {1..5}; do
        response=$(curl -s "http://$VIRTUAL_IP" | grep -o "Server ID: [0-9]*" || echo "No server ID found")
        log_info "Request $i: $response"
    done
    
    # Test HAProxy stats
    IFS=',' read -ra LB_ARRAY <<< "$LOADBALANCER_IPS"
    for lb_ip in "${LB_ARRAY[@]}"; do
        if curl -f --connect-timeout 5 "http://$lb_ip:8404/stats" > /dev/null 2>&1; then
            log_success "HAProxy stats accessible on $lb_ip"
        else
            log_warning "HAProxy stats not accessible on $lb_ip"
        fi
    done
}

display_summary() {
    log_info "Deployment Summary"
    echo "===================="
    source "$CONFIG_FILE"
    echo "Virtual IP: $VIRTUAL_IP"
    echo "Load Balancers: $LOADBALANCER_IPS"
    echo "Web Servers: $WEBSERVER_IPS"
    echo "HAProxy Stats: http://${LOADBALANCER_IPS%%,*}:8404/stats"
    echo "Access URL: http://$VIRTUAL_IP"
    echo "===================="
}

main() {
    log_info "Starting $PACKAGE_NAME v$VERSION installation..."
    
    # Parse command line arguments
    local deploy_k8s=false
    while [[ $# -gt 0 ]]; do
        case $1 in
            --kubernetes|-k)
                deploy_k8s=true
                shift
                ;;
            --help|-h)
                echo "Usage: $0 [--kubernetes|-k] [--help|-h]"
                echo "  --kubernetes, -k    Also deploy to Kubernetes"
                echo "  --help, -h          Show this help message"
                exit 0
                ;;
            *)
                log_error "Unknown option $1"
                exit 1
                ;;
        esac
    done
    
    check_requirements
    setup_configuration
    install_ansible_dependencies
    deploy_infrastructure
    deploy_kubernetes "$deploy_k8s"
    
    sleep 10  # Wait for services to start
    
    run_tests
    display_summary
    
    log_success "$PACKAGE_NAME installation completed successfully!"
}

# Trap to handle script interruption
trap 'log_error "Installation interrupted"; exit 1' INT TERM

main "$@"
10. Configuration File
bash# config/environment.conf

# Network Configuration
VIRTUAL_IP="192.168.1.100"
NETWORK_INTERFACE="eth0"

# Load Balancer Configuration
LOADBALANCER_IPS="192.168.1.101,192.168.1.102"
LOADBALANCER_PRIORITY="110,100"

# Web Server Configuration  
WEBSERVER_IPS="192.168.1.201,192.168.1.202,192.168.1.203"  can you finish the setup 

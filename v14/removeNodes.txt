To gracefully remove two worker nodes from a Kubernetes cluster with one master node and three worker nodes, 
follow these steps to ensure minimal disruption to running workloads:

1. **Check Node Status**:
   - Verify the nodes in the cluster:
     ```bash
     kubectl get nodes
     ```
   - Identify the two worker nodes to remove (e.g., `worker-node-2` and `worker-node-3`).

2. **Cordon the Nodes**:
   - Mark the nodes as unschedulable to prevent new pods from being scheduled:
     ```bash
     kubectl cordon worker-node-2
     kubectl cordon worker-node-3
     ```
   - This ensures no new pods are assigned while you drain existing ones.

3. **Drain the Nodes**:
   - Evict all pods from the nodes, allowing them to be rescheduled on the remaining worker node:
     ```bash
     kubectl drain worker-node-2 --ignore-daemonsets --delete-emptydir-data
     kubectl drain worker-node-3 --ignore-daemonsets --delete-emptydir-data
     ```
   - The `--ignore-daemonsets` flag skips DaemonSet-managed pods, and `--delete-emptydir-data` removes pods using emptyDir volumes. If pods have specific constraints (e.g., PodDisruptionBudgets), ensure they allow eviction or use `--force` cautiously.

4. **Verify Pod Relocation**:
   - Check that pods have been rescheduled to the remaining worker node (`worker-node-1`):
     ```bash
     kubectl get pods -o wide
     ```
   - Ensure no critical pods are stuck or pending. Resolve any issues (e.g., resource constraints) on the remaining node.

5. **Remove the Nodes from the Cluster**:
   - Delete the nodes from Kubernetes:
     ```bash
     kubectl delete node worker-node-2
     kubectl delete node worker-node-3
     ```
   - This removes the nodes from the clusterâ€™s inventory.

6. **Deprovision the Nodes (Optional)**:
   - If using a cloud provider or cluster management tool (e.g., kubeadm, KOPS, or EKS), update the configuration to remove the nodes from the infrastructure.
   - For manual setups, shut down or repurpose the machines after ensuring no Kubernetes-related processes (e.g., kubelet) are running:
     ```bash
     sudo systemctl stop kubelet
     ```
   - Clean up any residual Kubernetes configurations or data on the nodes.

7. **Verify Cluster Health**:
   - Confirm the cluster is stable with only the master and one worker node:
     ```bash
     kubectl get nodes
     kubectl get pods --all-namespaces -o wide
     ```
   - Check for any issues with workloads or resource availability on the remaining node.

### Important Considerations:
- **Resource Capacity**: Ensure the remaining worker node has sufficient CPU, memory, and storage to handle the relocated pods. If not, scale up the remaining node or add resources before draining.
- **Pod Disruption Budgets (PDBs)**: If applications have PDBs, ensure evictions comply with their requirements to avoid service disruptions.
- **Stateful Applications**: For stateful pods (e.g., databases), verify that data persistence (e.g., PersistentVolumes) is intact after relocation.
- **Cluster Autoscaler**: If using a cluster autoscaler, update its configuration to reflect the reduced node count.
- **Taints and Tolerations**: If the remaining node has taints, ensure pods have appropriate tolerations to schedule correctly.

By following these steps, you can safely reduce the cluster from three worker nodes to one while maintaining workload stability. If you encounter specific errors or need further assistance, let me know!
